{"version":3,"sources":["data/dwarves.js","components/LabelValueDisplay.js","components/Randomizer.js","components/Setup.js","nav/AppTabs.js","nav/github.svg","nav/Nav.js","App.js","index.js","serviceWorker.js"],"names":["dwarves","name","primaries","secondaries","grenades","useStyles","makeStyles","subheading","marginTop","width","LabelValueDisplay","className","label","value","dense","classes","containerClass","Typography","variant","color","component","players","pickOne","arr","Math","floor","random","length","card","margin","maxWidth","content","marginBottom","divider","row","display","flexDirection","Randomizer","useState","data","setData","handleClear","useCallback","handleRandomize","randomized","map","player","dwarf","primary","secondary","grenade","Card","CardHeader","title","CardContent","index","Fragment","Divider","CardActions","IconButton","onClick","Setup","theme","appBar","backgroundColor","palette","background","paper","tab","minWidth","invisible","AppTabs","setTab","AppBar","position","elevation","Tabs","onChange","_","newValue","Tab","drawerPaper","toolbar","paddingLeft","paddingRight","flex","nested","spacing","link","textDecoration","Nav","Toolbar","Tooltip","target","href","alt","height","src","githubSvg","createMuiTheme","type","App","Component","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94e926de.chunk.js","sourcesContent":["const dwarves = [\n  {\n    name: 'Driller',\n    primaries: [\n        'CRSPR Flamethrower',\n        'Cryo Cannon'\n    ],\n    secondaries: [\n        'Subata 120',\n        'Experimental Plasma Charger'\n    ],\n    grenades: [\n        'Impact Axe',\n        'HE Grenade',\n        'Neurotoxin Grenade'\n    ],\n  },\n  {\n    name: 'Engineer',\n    primaries: [\n        '\"Warthog\" Auto 210',\n        '\"Stubby\" Voltaic SMG'\n    ],\n    secondaries: [\n        'Deepcore 40mm PGL',\n        'Breach Cutter'\n    ],\n    grenades: [\n        'L.U.R.E.',\n        'Plasma Burster',\n        'Proximity Mine'\n    ],\n  },\n  {\n    name: 'Gunner',\n    primaries: [\n      '\"Lead Storm\" Powered Minigun',\n      '\"Thunderhead\" Heavy Autocannon',\n    ],\n    secondaries: [\n        '\"Bulldog\" Heavy Revolver',\n        'BRT7 Burst Fire Gun'\n    ],\n    grenades: [\n        'Sticky Grenade',\n        'Incendiary Grenade',\n        'Cluster Grenade'\n    ],\n  },\n  {\n    name: 'Scout',\n    primaries: [\n        'Deepcore GK2',\n        'M1000 Classic'\n    ],\n    secondaries: [\n        'Jury-Rigged Boomstick',\n        'Zhukov NUK17'\n    ],\n    grenades: [\n        'IFG',\n        'Cryo Grenade',\n        'Pherimone Canister'\n    ],\n  },\n]\nexport default dwarves\n","import {makeStyles} from '@material-ui/styles'\nimport React from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nfunction LabelValueDisplay({className, label, value, dense}) {\n    const classes = useStyles()\n    const containerClass = (className || '') + (dense ? '' : ' ' + classes.subheading)\n    return (\n        <div className={containerClass}>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\" component=\"div\">\n                {label}\n            </Typography>\n            <Typography variant=\"body2\" component=\"div\">\n                {value}\n            </Typography>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    subheading: {\n        marginTop: 16,\n        width: '100%'\n    }\n})\n\nexport default LabelValueDisplay\n","import {Divider} from '@material-ui/core'\nimport React, {useCallback, useState} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport makeStyles from '@material-ui/styles/makeStyles'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport ShuffleIcon from '@material-ui/icons/ShuffleOutlined'\nimport ClearAllIcon from '@material-ui/icons/ClearAll'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport dwarves from '../data/dwarves'\nimport LabelValueDisplay from './LabelValueDisplay'\n\nfunction Randomizer() {\n    const classes = useStyles()\n    const [data, setData] = useState(null)\n\n    const handleClear = useCallback(() => {\n        setData(null)\n    }, [])\n\n    const handleRandomize = useCallback(() => {\n        const randomized = players.map(player => {\n            const dwarf = pickOne(dwarves)\n            return {\n                name: player,\n                dwarf: dwarf.name,\n                primary: pickOne(dwarf.primaries),\n                secondary: pickOne(dwarf.secondaries),\n                grenade: pickOne(dwarf.grenades)\n            }\n        })\n        setData(randomized)\n    }, [])\n\n    return (\n        <Card className={classes.card}>\n            <CardHeader title='Randomizer'/>\n            <CardContent className={classes.content}>\n                {!data && <Typography>Click Randomize to begin.</Typography>}\n                {\n                    data &&\n                    data.map((player, index) =>\n                        <React.Fragment key={index}>\n                            <div className={classes.row}>\n                                <LabelValueDisplay label='Player' value={player.name}/>\n                                <LabelValueDisplay label='Dwarf' value={player.dwarf}/>\n                            </div>\n                            <div className={classes.row}>\n                                <LabelValueDisplay label='Primary' value={player.primary}/>\n                                <LabelValueDisplay label='Secondary' value={player.secondary}/>\n                            </div>\n                            <div className={classes.row}>\n                                <LabelValueDisplay label='Grenade' value={player.grenade}/>\n                            </div>\n                            {index < players.length - 1 && <Divider className={classes.divider}/>}\n                        </React.Fragment>\n                    )\n                }\n            </CardContent>\n            <CardActions>\n                <IconButton color='secondary' onClick={handleClear}>\n                    <ClearAllIcon/>\n                </IconButton>\n                <IconButton color='secondary' onClick={handleRandomize}>\n                    <ShuffleIcon/>\n                </IconButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst players = ['One', 'Two', 'Three', 'Four']\nconst pickOne = arr => {\n    const index = Math.floor((Math.random() * 100) % arr.length)\n    return arr[index]\n}\n\nconst useStyles = makeStyles({\n    card: {\n        margin: 16,\n        maxWidth: 400\n    },\n    content: {\n        marginTop: -16,\n        marginBottom: -16\n    },\n    divider: {\n        margin: '16px -16px 8px -16px'\n    },\n    row: {\n        display: 'flex',\n        flexDirection: 'row'\n    }\n})\n\nexport default Randomizer\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport makeStyles from '@material-ui/styles/makeStyles'\nimport CardContent from '@material-ui/core/CardContent'\nimport LabelValueDisplay from './LabelValueDisplay'\n\nfunction Setup() {\n    const classes = useStyles()\n\n    return (\n        <Card className={classes.card}>\n            <CardHeader title='Setup'/>\n            <CardContent>\n                <LabelValueDisplay label='Players' value='todo'/>\n                <LabelValueDisplay label='Guns' value='todo'/>\n                <LabelValueDisplay label='Grenades' value='todo'/>\n                <LabelValueDisplay label='Overclocks' value='todo'/>\n            </CardContent>\n        </Card>\n    )\n}\n\nconst useStyles = makeStyles({\n    card: {\n        margin: 16,\n        maxWidth: 400\n    }\n})\n\nexport default Setup\n","import React, {useState} from 'react'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport AppBar from '@material-ui/core/AppBar'\nimport Randomizer from '../components/Randomizer'\nimport Setup from '../components/Setup'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nfunction AppTabs() {\n    const classes = useStyles()\n    const [tab, setTab] = useState(0)\n    const handleTabChange = (_, newValue) => setTab(newValue)\n\n    return (\n        <React.Fragment>\n            <AppBar position='static' elevation={0} className={classes.appBar}>\n                <Tabs\n                    value={tab}\n                    onChange={handleTabChange}\n                >\n                    <Tab label='Randomizer' className={classes.tab}/>\n                    <Tab label='Setup' className={classes.tab}/>\n                </Tabs>\n            </AppBar>\n            <div className={tab !== 0 ? classes.invisible : ''}>\n                <Randomizer/>\n            </div>\n            <div className={tab !== 1 ? classes.invisible : ''}>\n                <Setup/>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        backgroundColor: theme.palette.background.paper\n    },\n    tab: {\n        backgroundColor: theme.palette.background.paper,\n        minWidth: 125\n    },\n    invisible: {\n        display: 'none'\n    }\n}))\n\nexport default AppTabs\n","export default __webpack_public_path__ + \"static/media/github.abfa92f7.svg\";","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport githubSvg from './github.svg'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nfunction Nav() {\n    const classes = useStyles()\n    return (\n        <React.Fragment>\n            <AppBar position='static' elevation={0} className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    {/* Title bar */}\n                    <Typography variant='h6' className={classes.title}>\n                        Deep Random Galactic\n                    </Typography>\n\n                    {/* Top right icons */}\n                    <Tooltip title='Contribute on GitHub!'>\n                        <IconButton target='_blank' href='https://github.com/NiXXeD/deeprandomgalactic'>\n                            <img alt='github link' width='24' height='24' src={githubSvg}/>\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        backgroundColor: theme.palette.background.paper\n    },\n    drawerPaper: {\n        width: 225\n    },\n    toolbar: {\n        paddingLeft: 8,\n        paddingRight: 8\n    },\n    title: {\n        paddingLeft: 12,\n        flex: 1\n    },\n    nested: {\n        paddingLeft: theme.spacing(4)\n    },\n    link: {\n        textDecoration: 'none',\n        color: 'inherit'\n    }\n}))\n\nexport default Nav\n","import React from 'react'\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme'\nimport ThemeProvider from '@material-ui/styles/ThemeProvider'\nimport AppTabs from './nav/AppTabs'\nimport Nav from './nav/Nav'\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n})\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <div>\n                <Nav/>\n\n                <AppTabs/>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\nfunction render(Component) {\n    ReactDOM.render(<Component/>, document.getElementById('root'))\n}\n\nrender(App)\n\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        const next = require('./App').default\n        render(next)\n    })\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready\n                    .then(() => {\n                        console.log(\n                            'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                        )\n                    })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister()\n                        .then(() => {\n                            window.location.reload()\n                        })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => registration.unregister())\n    }\n}\n"],"sourceRoot":""}